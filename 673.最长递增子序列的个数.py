# 给定一个未排序的整数数组，找到最长递增子序列的个数。
# 示例 1:
# 输入: [1,3,5,4,7]
# 输出: 2
# 解释: 有两个最长递增子序列，分别是 [1, 3, 4, 7] 和[1, 3, 5, 7]。
# 示例 2:
# 输入: [2,2,2,2,2]
# 输出: 5
# 解释: 最长递增子序列的长度是1，并且存在5个子序列的长度为1，因此输出5。
# 思路:
# 1.设dp[i]为以该数结尾，能构成的最长序列的长度。进行连接的时候，对于每个数字num[i]，遍历位置在它之前的数字num[j]，
# 如果比这个数小（num[j]<num[i]），也就是能构成一个序列，这样就能进行状态转移，我们令dp[i]=max(dp[i],dp[j]+1)
# 来保证存储的为最长长度，同时可以记录max(dp[i])
# 2.考虑完题目的长度优先后，我们考虑数量，也就是说最长长度的序列有几个，这个问题需要我们在处理dp的时候来记录，
# 我们设ans[i]为以第i个数结尾的最长序列的个数，与dp同理，ans初值也都是1
# 3.状态转移的时候，如果dp更新了，也就是说（dp[j]+1>dp[i]）说明这个长度的序列是新出现的，
# 我们需要将ans[i]设置为ans[j]，因为新序列中，最新的数提供了序列的尾巴，数量是由前面积累的（或者说转移）；
# 举例序列[1 1 3 7]我们易得数字3对应的dp=2,ans=2,因为可以构成两个[1 3]那么我们操作到数字7的时候，
# 发现接在3后面最长，就可以转移ans来作为初始数量
# 4.而当dp[j]+1==dp[i]的时候，如同样例，操作7的时候，我们最先发现了可以接在5后面，最长序列[1 3 5 7],
# 然后发现可以接在4后面，[1 3 4 7]，长度也是4，这时候就同样需要转移ans，加上去 ans[i]+=ans[j]
# 5.最后我们需要遍历dp，找到dp[i]=我们记录的最大值的时候，累加我们得到的ans[i]，即为所求结果，时间复杂度是O(n^2)
class Solution:
    def findNumberOfLIS(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums:
            return 0
        dp = [1] * len(nums)
        ans = [1] * len(nums)
        for i in range(1, len(nums)):
            for j in range(i):
                if nums[j] < nums[i]:
                    if dp[j] + 1 > dp[i]:
                        ans[i] = ans[j]
                        dp[i] = dp[j] + 1
                    elif dp[j] + 1 == dp[i]:
                        ans[i] += ans[j]
        res = sum(y for x, y in zip(dp, ans) if x == max(dp))
        return res

print(Solution().findNumberOfLIS([1,3,5,4,7]))